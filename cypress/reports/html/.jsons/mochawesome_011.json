{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-24T17:04:27.946Z",
    "end": "2023-11-24T17:04:31.137Z",
    "duration": 3191,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2af21f5c-2825-4767-955f-cd638a30a374",
      "title": "",
      "fullFile": "features\\4-Widgets\\ToolTips.feature",
      "file": "features\\4-Widgets\\ToolTips.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce818004-9461-4acf-8161-24394a391772",
          "title": "Tool Tips Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the tooltip",
              "fullTitle": "Tool Tips Validation Verify the tooltip",
              "timedOut": null,
              "duration": 3062,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e6;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages.TestStepResultStatus.PASSED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      }, isLastEl(steps, step));\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e6 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e6 === void 0 ? void 0 : _e6.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e29) {\n          if (e29 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e29;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n          taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          }, isLastEl(steps, step));\n        } else {\n          taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.SKIPPED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          }, isLastEl(steps, step));\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n          const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n          const testStepId2 = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId\n          });\n          taskTestStepStarted(context, {\n            testStepId: testStepId2,\n            testCaseStartedId,\n            timestamp: (0, messages_1.createTimestamp)()\n          });\n          taskTestStepFinished(context, {\n            testStepId: testStepId2,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.SKIPPED,\n              duration: {\n                seconds: 0,\n                nanos: 0\n              }\n            },\n            timestamp: (0, messages_1.createTimestamp)()\n          }, isLastEl(remainingSteps, skippedStep));\n        }\n        for (let i49 = 0, count = remainingSteps.length; i49 < count; i49++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        taskTestStepFinished(context, {\n          testStepId,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        }, isLastEl(steps, step));\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "329202c5-a748-4a29-8583-6640dbf53da5",
              "parentUUID": "ce818004-9461-4acf-8161-24394a391772",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "329202c5-a748-4a29-8583-6640dbf53da5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3062,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "reportPageTitle": "Cypress Inline Reporter",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}